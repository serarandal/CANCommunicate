   import PyQt5.QtCore
#import can
from PyQt5 import QtCore, QtGui, QtWidgets
import time
import Utility
a = 0
b=""
d=""
c=""
b2Pressed = False
class Worker(QtCore.QObject):
    finished = QtCore.pyqtSignal()
    progress = QtCore.pyqtSignal(str)
    def run(self):
        global a
        global b
        global c
        print("Starting the reading worker gui thread")
        self.isKilled = False
        j = 0
        z = 0
        x = 0
        t0 = time.perf_counter()
        t1 = time.perf_counter()
        msg2 = ""
        while 1 and self.isKilled==False:
            if t1 - t0 > 0.1 :
                msg = Utility.testTwoCan()
                t0 = time.perf_counter()
                if msg == "" or msg == None :
                    if j == 0:
                        self.progress.emit("NoMessagesFromThatSource")
                        j = 1
                    else:
                        None
                elif msg is msg2 :
                    if z == 0:
                        self.progress.emit("NoNewMessagesFromThatSource")
                        z = 1
                    else:
                        None
                else:
                    msg2 = msg
                    msgsplited = msg.split("/")
                    msgid = int(msgsplited[0], 16)
                    if msgid == int(c,16):
                        self.progress.emit(msg)
                        j = 0
                        z = 0
                    elif x == 0:
                        self.progress.emit("NoNewMessagesFromThatSource")
                        x = 1
                    else:
                        None
            else :
                t1 = time.perf_counter()

        self.finished.emit()

    def stop(self):
        self.isKilled = True
   
   
    self.Font = PyQt5.QtGui.QFont('Arial', 14)
        self.i = 0
        self.model = QtGui.QStandardItemModel()
   	        self.listView.setModel(self.model)

    def b1(self):
        global b
        global a
        global d
        global c
        global deviceName
        b = self.textEdit.toPlainText()
        c = b   #this is needed bc you change b into integer below
        if d == b:
            alreadyopen = 1
            if b == "000":
                b = 0
            elif b == "00":
                b = 0
            elif b == "0":
                b = 0
            else:
                try:
                    b = int(b,16)
                except:
                    print("id vacio, intentalo de nuevo")
        else:
            d = c  #c is nedded instead of b.
            alreadyopen = 0
        if alreadyopen == 0:
            try:
                with open("devices.txt") as f:
                    content = f.readlines()
            except:
                print("Cannot open devices.txt, make sure it is created and you have reading rights")
            for item in content:
                stritem=str(item)
                print(stritem)
                stritem = stritem.split("/")
                strdi2 = stritem[0].split(" ")
                if strdi2[1] == b :
                    deviceName = strdi2[0]
        else:
            alreadyopen = 1
        if a == 0:
            a = 1
            print("Pushed reading can button:")
            self.runLongTask()
        else:
            print("Already reading(ManuallyMadeWindow)")
            print("stopping")
            self.stopLongTask()
            a = 0

    def reportProgress(self,n):
        global deviceName
        global deviceDataBytes
        global devicesCalculations
        global b2Pressed
        if n == "NoMessagesFromThatSource" or n == "NoNewMessagesFromThatSource":
            n = str(n)
            it = QtGui.QStandardItem(n)
            if self.i >= 40:
                self.model.removeRows(self.i - 39, 3)
                self.i = 38
                self.model.appendRow(it)
                self.listView.scrollToBottom()
            else:
                self.model.appendRow(it)
                self.listView.scrollToBottom()
                self.i += 1
        elif b2Pressed == False:
            n = str(n)
            g = n.split("/")
            n =deviceName+"                  "+g[1]+"                     "+g[2]
            it = QtGui.QStandardItem(n)
            if self.i >= 40:
                self.model.removeRows(self.i - 39, 3)
                self.i = 38
                self.model.appendRow(it)
                self.listView.scrollToBottom()
            else:
                self.model.appendRow(it)
                self.listView.scrollToBottom()
                self.i += 1
        else:
            n=Utility.filterDevices(deviceName,n)
            it=QtGui.QStandardItem(n)
            if self.i >= 40:
                self.model.removeRows(self.i - 39, 3)
                self.i = 38
                self.model.appendRow(it)
                self.listView.scrollToBottom()
            else:
                self.model.appendRow(it)
                self.listView.scrollToBottom()
                self.i += 1

    def runLongTask(self):
        self.thread = QtCore.QThread()
        self.worker = Worker()
        self.worker.moveToThread(self.thread)
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.worker.progress.connect(self.reportProgress)
        self.thread.start()

    def stopLongTask(self):
        print("here")
        n = "Stopped reading"
        it = QtGui.QStandardItem(n)
        if self.i >= 40:
            self.model.removeRows(self.i - 39, 3)
            self.i = 38
            self.model.appendRow(it)
            self.listView.scrollToBottom()
        else:
            self.model.appendRow(it)
            self.listView.scrollToBottom()
            self.i += 1
        self.worker.stop()
